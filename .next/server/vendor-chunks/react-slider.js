"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-slider";
exports.ids = ["vendor-chunks/react-slider"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-slider/dist/es/dev/components/ReactSlider/ReactSlider.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/react-slider/dist/es/dev/components/ReactSlider/ReactSlider.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ReactSlider$1)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/inheritsLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/inheritsLoose.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\");\n\n\n\n\nvar _jsxFileName = \"/Users/krise/github/react-slider/src/components/ReactSlider/ReactSlider.jsx\";\n/**\n * To prevent text selection while dragging.\n * http://stackoverflow.com/questions/5429827/how-can-i-prevent-text-element-selection-with-cursor-drag\n */ function pauseEvent(e) {\n    if (e && e.stopPropagation) {\n        e.stopPropagation();\n    }\n    if (e && e.preventDefault) {\n        e.preventDefault();\n    }\n    return false;\n}\nfunction stopPropagation(e) {\n    if (e.stopPropagation) {\n        e.stopPropagation();\n    }\n}\nfunction sanitizeInValue(x) {\n    if (x == null) {\n        return [];\n    }\n    return Array.isArray(x) ? x.slice() : [\n        x\n    ];\n}\nfunction prepareOutValue(x) {\n    return x !== null && x.length === 1 ? x[0] : x.slice();\n}\nfunction trimSucceeding(length, nextValue, minDistance, max) {\n    for(let i = 0; i < length; i += 1){\n        const padding = max - i * minDistance;\n        if (nextValue[length - 1 - i] > padding) {\n            // eslint-disable-next-line no-param-reassign\n            nextValue[length - 1 - i] = padding;\n        }\n    }\n}\nfunction trimPreceding(length, nextValue, minDistance, min) {\n    for(let i = 0; i < length; i += 1){\n        const padding = min + i * minDistance;\n        if (nextValue[i] < padding) {\n            // eslint-disable-next-line no-param-reassign\n            nextValue[i] = padding;\n        }\n    }\n}\nfunction addHandlers(eventMap) {\n    Object.keys(eventMap).forEach((key)=>{\n        if (typeof document !== \"undefined\") {\n            document.addEventListener(key, eventMap[key], false);\n        }\n    });\n}\nfunction removeHandlers(eventMap) {\n    Object.keys(eventMap).forEach((key)=>{\n        if (typeof document !== \"undefined\") {\n            document.removeEventListener(key, eventMap[key], false);\n        }\n    });\n}\nfunction trimAlignValue(val, props) {\n    return alignValue(trimValue(val, props), props);\n}\nfunction alignValue(val, props) {\n    const valModStep = (val - props.min) % props.step;\n    let alignedValue = val - valModStep;\n    if (Math.abs(valModStep) * 2 >= props.step) {\n        alignedValue += valModStep > 0 ? props.step : -props.step;\n    }\n    return parseFloat(alignedValue.toFixed(5));\n}\nfunction trimValue(val, props) {\n    let trimmed = val;\n    if (trimmed <= props.min) {\n        trimmed = props.min;\n    }\n    if (trimmed >= props.max) {\n        trimmed = props.max;\n    }\n    return trimmed;\n}\nlet ReactSlider = /*#__PURE__*/ function(_React$Component) {\n    _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__(ReactSlider, _React$Component);\n    function ReactSlider(_props) {\n        var _this;\n        _this = _React$Component.call(this, _props) || this;\n        _this.onKeyUp = ()=>{\n            _this.onEnd();\n        };\n        _this.onMouseUp = ()=>{\n            _this.onEnd(_this.getMouseEventMap());\n        };\n        _this.onTouchEnd = (e)=>{\n            e.preventDefault();\n            _this.onEnd(_this.getTouchEventMap());\n        };\n        _this.onBlur = ()=>{\n            _this.setState({\n                index: -1\n            }, _this.onEnd(_this.getKeyDownEventMap()));\n        };\n        _this.onMouseMove = (e)=>{\n            // Prevent controlled updates from happening while mouse is moving\n            _this.setState({\n                pending: true\n            });\n            const position = _this.getMousePosition(e);\n            const diffPosition = _this.getDiffPosition(position[0]);\n            const newValue = _this.getValueFromPosition(diffPosition);\n            _this.move(newValue);\n        };\n        _this.onTouchMove = (e)=>{\n            if (e.touches.length > 1) {\n                return;\n            } // Prevent controlled updates from happending while touch is moving\n            _this.setState({\n                pending: true\n            });\n            const position = _this.getTouchPosition(e);\n            if (typeof _this.isScrolling === \"undefined\") {\n                const diffMainDir = position[0] - _this.startPosition[0];\n                const diffScrollDir = position[1] - _this.startPosition[1];\n                _this.isScrolling = Math.abs(diffScrollDir) > Math.abs(diffMainDir);\n            }\n            if (_this.isScrolling) {\n                _this.setState({\n                    index: -1\n                });\n                return;\n            }\n            const diffPosition = _this.getDiffPosition(position[0]);\n            const newValue = _this.getValueFromPosition(diffPosition);\n            _this.move(newValue);\n        };\n        _this.onKeyDown = (e)=>{\n            if (e.ctrlKey || e.shiftKey || e.altKey || e.metaKey) {\n                return;\n            } // Prevent controlled updates from happening while a key is pressed\n            _this.setState({\n                pending: true\n            });\n            switch(e.key){\n                case \"ArrowLeft\":\n                case \"ArrowDown\":\n                case \"Left\":\n                case \"Down\":\n                    e.preventDefault();\n                    _this.moveDownByStep();\n                    break;\n                case \"ArrowRight\":\n                case \"ArrowUp\":\n                case \"Right\":\n                case \"Up\":\n                    e.preventDefault();\n                    _this.moveUpByStep();\n                    break;\n                case \"Home\":\n                    e.preventDefault();\n                    _this.move(_this.props.min);\n                    break;\n                case \"End\":\n                    e.preventDefault();\n                    _this.move(_this.props.max);\n                    break;\n                case \"PageDown\":\n                    e.preventDefault();\n                    _this.moveDownByStep(_this.props.pageFn(_this.props.step));\n                    break;\n                case \"PageUp\":\n                    e.preventDefault();\n                    _this.moveUpByStep(_this.props.pageFn(_this.props.step));\n                    break;\n            }\n        };\n        _this.onSliderMouseDown = (e)=>{\n            // do nothing if disabled or right click\n            if (_this.props.disabled || e.button === 2) {\n                return;\n            } // Prevent controlled updates from happening while mouse is moving\n            _this.setState({\n                pending: true\n            });\n            if (!_this.props.snapDragDisabled) {\n                const position = _this.getMousePosition(e);\n                _this.forceValueFromPosition(position[0], (i)=>{\n                    _this.start(i, position[0]);\n                    addHandlers(_this.getMouseEventMap());\n                });\n            }\n            pauseEvent(e);\n        };\n        _this.onSliderClick = (e)=>{\n            if (_this.props.disabled) {\n                return;\n            }\n            if (_this.props.onSliderClick && !_this.hasMoved) {\n                const position = _this.getMousePosition(e);\n                const valueAtPos = trimAlignValue(_this.calcValue(_this.calcOffsetFromPosition(position[0])), _this.props);\n                _this.props.onSliderClick(valueAtPos);\n            }\n        };\n        _this.createOnKeyDown = (i)=>(e)=>{\n                if (_this.props.disabled) {\n                    return;\n                }\n                _this.start(i);\n                addHandlers(_this.getKeyDownEventMap());\n                pauseEvent(e);\n            };\n        _this.createOnMouseDown = (i)=>(e)=>{\n                // do nothing if disabled or right click\n                if (_this.props.disabled || e.button === 2) {\n                    return;\n                } // Prevent controlled updates from happending while mouse is moving\n                _this.setState({\n                    pending: true\n                });\n                const position = _this.getMousePosition(e);\n                _this.start(i, position[0]);\n                addHandlers(_this.getMouseEventMap());\n                pauseEvent(e);\n            };\n        _this.createOnTouchStart = (i)=>(e)=>{\n                if (_this.props.disabled || e.touches.length > 1) {\n                    return;\n                } // Prevent controlled updates from happending while touch is moving\n                _this.setState({\n                    pending: true\n                });\n                const position = _this.getTouchPosition(e);\n                _this.startPosition = position; // don't know yet if the user is trying to scroll\n                _this.isScrolling = undefined;\n                _this.start(i, position[0]);\n                addHandlers(_this.getTouchEventMap());\n                stopPropagation(e);\n            };\n        _this.handleResize = ()=>{\n            // setTimeout of 0 gives element enough time to have assumed its new size if\n            // it is being resized\n            const resizeTimeout = window.setTimeout(()=>{\n                // drop this timeout from pendingResizeTimeouts to reduce memory usage\n                _this.pendingResizeTimeouts.shift();\n                _this.resize();\n            }, 0);\n            _this.pendingResizeTimeouts.push(resizeTimeout);\n        };\n        _this.renderThumb = (style, i)=>{\n            const className = _this.props.thumbClassName + \" \" + _this.props.thumbClassName + \"-\" + i + \" \" + (_this.state.index === i ? _this.props.thumbActiveClassName : \"\");\n            const props = {\n                \"ref\": (r)=>{\n                    _this[\"thumb\" + i] = r;\n                },\n                \"key\": _this.props.thumbClassName + \"-\" + i,\n                className,\n                style,\n                \"onMouseDown\": _this.createOnMouseDown(i),\n                \"onTouchStart\": _this.createOnTouchStart(i),\n                \"onFocus\": _this.createOnKeyDown(i),\n                \"tabIndex\": 0,\n                \"role\": \"slider\",\n                \"aria-orientation\": _this.props.orientation,\n                \"aria-valuenow\": _this.state.value[i],\n                \"aria-valuemin\": _this.props.min,\n                \"aria-valuemax\": _this.props.max,\n                \"aria-label\": Array.isArray(_this.props.ariaLabel) ? _this.props.ariaLabel[i] : _this.props.ariaLabel,\n                \"aria-labelledby\": Array.isArray(_this.props.ariaLabelledby) ? _this.props.ariaLabelledby[i] : _this.props.ariaLabelledby,\n                \"aria-disabled\": _this.props.disabled\n            };\n            const state = {\n                index: i,\n                value: prepareOutValue(_this.state.value),\n                valueNow: _this.state.value[i]\n            };\n            if (_this.props.ariaValuetext) {\n                props[\"aria-valuetext\"] = typeof _this.props.ariaValuetext === \"string\" ? _this.props.ariaValuetext : _this.props.ariaValuetext(state);\n            }\n            return _this.props.renderThumb(props, state);\n        };\n        _this.renderTrack = (i, offsetFrom, offsetTo)=>{\n            const props = {\n                key: _this.props.trackClassName + \"-\" + i,\n                className: _this.props.trackClassName + \" \" + _this.props.trackClassName + \"-\" + i,\n                style: _this.buildTrackStyle(offsetFrom, _this.state.upperBound - offsetTo)\n            };\n            const state = {\n                index: i,\n                value: prepareOutValue(_this.state.value)\n            };\n            return _this.props.renderTrack(props, state);\n        };\n        let value = sanitizeInValue(_props.value);\n        if (!value.length) {\n            value = sanitizeInValue(_props.defaultValue);\n        } // array for storing resize timeouts ids\n        _this.pendingResizeTimeouts = [];\n        const zIndices = [];\n        for(let i = 0; i < value.length; i += 1){\n            value[i] = trimAlignValue(value[i], _props);\n            zIndices.push(i);\n        }\n        _this.resizeObserver = null;\n        _this.resizeElementRef = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createRef();\n        _this.state = {\n            index: -1,\n            upperBound: 0,\n            sliderLength: 0,\n            value,\n            zIndices\n        };\n        return _this;\n    }\n    var _proto = ReactSlider.prototype;\n    _proto.componentDidMount = function componentDidMount() {\n        if (false) {}\n    } // Keep the internal `value` consistent with an outside `value` if present.\n    ;\n    ReactSlider.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n        const value = sanitizeInValue(props.value);\n        if (!value.length) {\n            return null;\n        } // Do not allow controlled upates to happen while we have pending updates\n        if (state.pending) {\n            return null;\n        }\n        return {\n            value: value.map((item)=>trimAlignValue(item, props))\n        };\n    };\n    _proto.componentDidUpdate = function componentDidUpdate() {\n        // If an upperBound has not yet been determined (due to the component being hidden\n        // during the mount event, or during the last resize), then calculate it now\n        if (this.state.upperBound === 0) {\n            this.resize();\n        }\n    };\n    _proto.componentWillUnmount = function componentWillUnmount() {\n        this.clearPendingResizeTimeouts();\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n        }\n    };\n    _proto.onEnd = function onEnd(eventMap) {\n        if (eventMap) {\n            removeHandlers(eventMap);\n        }\n        if (this.hasMoved) {\n            this.fireChangeEvent(\"onAfterChange\");\n        } // Allow controlled updates to continue\n        this.setState({\n            pending: false\n        });\n        this.hasMoved = false;\n    };\n    _proto.getValue = function getValue() {\n        return prepareOutValue(this.state.value);\n    };\n    _proto.getClosestIndex = function getClosestIndex(pixelOffset) {\n        let minDist = Number.MAX_VALUE;\n        let closestIndex = -1;\n        const { value } = this.state;\n        const l = value.length;\n        for(let i = 0; i < l; i += 1){\n            const offset = this.calcOffset(value[i]);\n            const dist = Math.abs(pixelOffset - offset);\n            if (dist < minDist) {\n                minDist = dist;\n                closestIndex = i;\n            }\n        }\n        return closestIndex;\n    };\n    _proto.getMousePosition = function getMousePosition(e) {\n        return [\n            e[\"page\" + this.axisKey()],\n            e[\"page\" + this.orthogonalAxisKey()]\n        ];\n    };\n    _proto.getTouchPosition = function getTouchPosition(e) {\n        const touch = e.touches[0];\n        return [\n            touch[\"page\" + this.axisKey()],\n            touch[\"page\" + this.orthogonalAxisKey()]\n        ];\n    };\n    _proto.getKeyDownEventMap = function getKeyDownEventMap() {\n        return {\n            keydown: this.onKeyDown,\n            keyup: this.onKeyUp,\n            focusout: this.onBlur\n        };\n    };\n    _proto.getMouseEventMap = function getMouseEventMap() {\n        return {\n            mousemove: this.onMouseMove,\n            mouseup: this.onMouseUp\n        };\n    };\n    _proto.getTouchEventMap = function getTouchEventMap() {\n        return {\n            touchmove: this.onTouchMove,\n            touchend: this.onTouchEnd\n        };\n    };\n    _proto.getValueFromPosition = function getValueFromPosition(position) {\n        const diffValue = position / (this.state.sliderLength - this.state.thumbSize) * (this.props.max - this.props.min);\n        return trimAlignValue(this.state.startValue + diffValue, this.props);\n    };\n    _proto.getDiffPosition = function getDiffPosition(position) {\n        let diffPosition = position - this.state.startPosition;\n        if (this.props.invert) {\n            diffPosition *= -1;\n        }\n        return diffPosition;\n    } // create the `keydown` handler for the i-th thumb\n    ;\n    _proto.resize = function resize() {\n        const { slider, thumb0: thumb } = this;\n        if (!slider || !thumb) {\n            return;\n        }\n        const sizeKey = this.sizeKey(); // For the slider size, we want to use the client width/height, excluding any borders\n        const sliderRect = slider.getBoundingClientRect();\n        const sliderSize = slider[sizeKey];\n        const sliderMax = sliderRect[this.posMaxKey()];\n        const sliderMin = sliderRect[this.posMinKey()]; // For the thumb size, we want to use the outer width/height, including any borders\n        const thumbRect = thumb.getBoundingClientRect();\n        const thumbSize = thumbRect[sizeKey.replace(\"client\", \"\").toLowerCase()];\n        const upperBound = sliderSize - thumbSize;\n        const sliderLength = Math.abs(sliderMax - sliderMin);\n        if (this.state.upperBound !== upperBound || this.state.sliderLength !== sliderLength || this.state.thumbSize !== thumbSize) {\n            this.setState({\n                upperBound,\n                sliderLength,\n                thumbSize\n            });\n        }\n    } // calculates the offset of a thumb in pixels based on its value.\n    ;\n    _proto.calcOffset = function calcOffset(value) {\n        const range = this.props.max - this.props.min;\n        if (range === 0) {\n            return 0;\n        }\n        const ratio = (value - this.props.min) / range;\n        return ratio * this.state.upperBound;\n    } // calculates the value corresponding to a given pixel offset, i.e. the inverse of `calcOffset`.\n    ;\n    _proto.calcValue = function calcValue(offset) {\n        const ratio = offset / this.state.upperBound;\n        return ratio * (this.props.max - this.props.min) + this.props.min;\n    };\n    _proto.calcOffsetFromPosition = function calcOffsetFromPosition(position) {\n        const { slider } = this;\n        const sliderRect = slider.getBoundingClientRect();\n        const sliderMax = sliderRect[this.posMaxKey()];\n        const sliderMin = sliderRect[this.posMinKey()]; // The `position` value passed in is the mouse position based on the window height.\n        // The slider bounding rect is based on the viewport, so we must add the window scroll\n        // offset to normalize the values.\n        const windowOffset = window[\"page\" + this.axisKey() + \"Offset\"];\n        const sliderStart = windowOffset + (this.props.invert ? sliderMax : sliderMin);\n        let pixelOffset = position - sliderStart;\n        if (this.props.invert) {\n            pixelOffset = this.state.sliderLength - pixelOffset;\n        }\n        pixelOffset -= this.state.thumbSize / 2;\n        return pixelOffset;\n    } // Snaps the nearest thumb to the value corresponding to `position`\n    ;\n    _proto.forceValueFromPosition = function forceValueFromPosition(position, callback) {\n        const pixelOffset = this.calcOffsetFromPosition(position);\n        const closestIndex = this.getClosestIndex(pixelOffset);\n        const nextValue = trimAlignValue(this.calcValue(pixelOffset), this.props); // Clone this.state.value since we'll modify it temporarily\n        // eslint-disable-next-line zillow/react/no-access-state-in-setstate\n        const value = this.state.value.slice();\n        value[closestIndex] = nextValue; // Prevents the slider from shrinking below `props.minDistance`\n        for(let i = 0; i < value.length - 1; i += 1){\n            if (value[i + 1] - value[i] < this.props.minDistance) {\n                return;\n            }\n        }\n        this.fireChangeEvent(\"onBeforeChange\");\n        this.hasMoved = true;\n        this.setState({\n            value\n        }, ()=>{\n            callback(closestIndex);\n            this.fireChangeEvent(\"onChange\");\n        });\n    } // clear all pending timeouts to avoid error messages after unmounting\n    ;\n    _proto.clearPendingResizeTimeouts = function clearPendingResizeTimeouts() {\n        do {\n            const nextTimeout = this.pendingResizeTimeouts.shift();\n            clearTimeout(nextTimeout);\n        }while (this.pendingResizeTimeouts.length);\n    };\n    _proto.start = function start(i, position) {\n        const thumbRef = this[\"thumb\" + i];\n        if (thumbRef) {\n            thumbRef.focus();\n        }\n        const { zIndices } = this.state; // remove wherever the element is\n        zIndices.splice(zIndices.indexOf(i), 1); // add to end\n        zIndices.push(i);\n        this.setState((prevState)=>({\n                startValue: prevState.value[i],\n                startPosition: position !== undefined ? position : prevState.startPosition,\n                index: i,\n                zIndices\n            }));\n    };\n    _proto.moveUpByStep = function moveUpByStep(step) {\n        if (step === void 0) {\n            step = this.props.step;\n        }\n        const oldValue = this.state.value[this.state.index]; // if the slider is inverted and horizontal we want to honor the inverted value\n        const newValue = this.props.invert && this.props.orientation === \"horizontal\" ? oldValue - step : oldValue + step;\n        const trimAlign = trimAlignValue(newValue, this.props);\n        this.move(Math.min(trimAlign, this.props.max));\n    };\n    _proto.moveDownByStep = function moveDownByStep(step) {\n        if (step === void 0) {\n            step = this.props.step;\n        }\n        const oldValue = this.state.value[this.state.index]; // if the slider is inverted and horizontal we want to honor the inverted value\n        const newValue = this.props.invert && this.props.orientation === \"horizontal\" ? oldValue + step : oldValue - step;\n        const trimAlign = trimAlignValue(newValue, this.props);\n        this.move(Math.max(trimAlign, this.props.min));\n    };\n    _proto.move = function move(newValue) {\n        // Clone this.state.value since we'll modify it temporarily\n        // eslint-disable-next-line zillow/react/no-access-state-in-setstate\n        const value = this.state.value.slice();\n        const { index } = this.state;\n        const { length } = value; // Short circuit if the value is not changing\n        const oldValue = value[index];\n        if (newValue === oldValue) {\n            return;\n        } // Trigger only before the first movement\n        if (!this.hasMoved) {\n            this.fireChangeEvent(\"onBeforeChange\");\n        }\n        this.hasMoved = true; // if \"pearling\" (= thumbs pushing each other) is disabled,\n        // prevent the thumb from getting closer than `minDistance` to the previous or next thumb.\n        const { pearling, max, min, minDistance } = this.props;\n        if (!pearling) {\n            if (index > 0) {\n                const valueBefore = value[index - 1];\n                if (newValue < valueBefore + minDistance) {\n                    // eslint-disable-next-line no-param-reassign\n                    newValue = valueBefore + minDistance;\n                }\n            }\n            if (index < length - 1) {\n                const valueAfter = value[index + 1];\n                if (newValue > valueAfter - minDistance) {\n                    // eslint-disable-next-line no-param-reassign\n                    newValue = valueAfter - minDistance;\n                }\n            }\n        }\n        value[index] = newValue; // if \"pearling\" is enabled, let the current thumb push the pre- and succeeding thumbs.\n        if (pearling && length > 1) {\n            if (newValue > oldValue) {\n                this.pushSucceeding(value, minDistance, index);\n                trimSucceeding(length, value, minDistance, max);\n            } else if (newValue < oldValue) {\n                this.pushPreceding(value, minDistance, index);\n                trimPreceding(length, value, minDistance, min);\n            }\n        } // Normally you would use `shouldComponentUpdate`,\n        // but since the slider is a low-level component,\n        // the extra complexity might be worth the extra performance.\n        this.setState({\n            value\n        }, this.fireChangeEvent.bind(this, \"onChange\"));\n    };\n    _proto.pushSucceeding = function pushSucceeding(value, minDistance, index) {\n        let i;\n        let padding;\n        for(i = index, padding = value[i] + minDistance; value[i + 1] !== null && padding > value[i + 1]; i += 1, padding = value[i] + minDistance){\n            // eslint-disable-next-line no-param-reassign\n            value[i + 1] = alignValue(padding, this.props);\n        }\n    };\n    _proto.pushPreceding = function pushPreceding(value, minDistance, index) {\n        for(let i = index, padding = value[i] - minDistance; value[i - 1] !== null && padding < value[i - 1]; i -= 1, padding = value[i] - minDistance){\n            // eslint-disable-next-line no-param-reassign\n            value[i - 1] = alignValue(padding, this.props);\n        }\n    };\n    _proto.axisKey = function axisKey() {\n        if (this.props.orientation === \"vertical\") {\n            return \"Y\";\n        } // Defaults to 'horizontal';\n        return \"X\";\n    };\n    _proto.orthogonalAxisKey = function orthogonalAxisKey() {\n        if (this.props.orientation === \"vertical\") {\n            return \"X\";\n        } // Defaults to 'horizontal'\n        return \"Y\";\n    };\n    _proto.posMinKey = function posMinKey() {\n        if (this.props.orientation === \"vertical\") {\n            return this.props.invert ? \"bottom\" : \"top\";\n        } // Defaults to 'horizontal'\n        return this.props.invert ? \"right\" : \"left\";\n    };\n    _proto.posMaxKey = function posMaxKey() {\n        if (this.props.orientation === \"vertical\") {\n            return this.props.invert ? \"top\" : \"bottom\";\n        } // Defaults to 'horizontal'\n        return this.props.invert ? \"left\" : \"right\";\n    };\n    _proto.sizeKey = function sizeKey() {\n        if (this.props.orientation === \"vertical\") {\n            return \"clientHeight\";\n        } // Defaults to 'horizontal'\n        return \"clientWidth\";\n    };\n    _proto.fireChangeEvent = function fireChangeEvent(event) {\n        if (this.props[event]) {\n            this.props[event](prepareOutValue(this.state.value), this.state.index);\n        }\n    };\n    _proto.buildThumbStyle = function buildThumbStyle(offset, i) {\n        const style = {\n            position: \"absolute\",\n            touchAction: \"none\",\n            willChange: this.state.index >= 0 ? this.posMinKey() : undefined,\n            zIndex: this.state.zIndices.indexOf(i) + 1\n        };\n        style[this.posMinKey()] = offset + \"px\";\n        return style;\n    };\n    _proto.buildTrackStyle = function buildTrackStyle(min, max) {\n        const obj = {\n            position: \"absolute\",\n            willChange: this.state.index >= 0 ? this.posMinKey() + \",\" + this.posMaxKey() : undefined\n        };\n        obj[this.posMinKey()] = min;\n        obj[this.posMaxKey()] = max;\n        return obj;\n    };\n    _proto.buildMarkStyle = function buildMarkStyle(offset) {\n        var _ref;\n        return _ref = {\n            position: \"absolute\"\n        }, _ref[this.posMinKey()] = offset, _ref;\n    };\n    _proto.renderThumbs = function renderThumbs(offset) {\n        const { length } = offset;\n        const styles = [];\n        for(let i = 0; i < length; i += 1){\n            styles[i] = this.buildThumbStyle(offset[i], i);\n        }\n        const res = [];\n        for(let i = 0; i < length; i += 1){\n            res[i] = this.renderThumb(styles[i], i);\n        }\n        return res;\n    };\n    _proto.renderTracks = function renderTracks(offset) {\n        const tracks = [];\n        const lastIndex = offset.length - 1;\n        tracks.push(this.renderTrack(0, 0, offset[0]));\n        for(let i = 0; i < lastIndex; i += 1){\n            tracks.push(this.renderTrack(i + 1, offset[i], offset[i + 1]));\n        }\n        tracks.push(this.renderTrack(lastIndex + 1, offset[lastIndex], this.state.upperBound));\n        return tracks;\n    };\n    _proto.renderMarks = function renderMarks() {\n        let { marks } = this.props;\n        const range = this.props.max - this.props.min + 1;\n        if (typeof marks === \"boolean\") {\n            marks = Array.from({\n                length: range\n            }).map((_, key)=>key);\n        } else if (typeof marks === \"number\") {\n            marks = Array.from({\n                length: range\n            }).map((_, key)=>key).filter((key)=>key % marks === 0);\n        }\n        return marks.map(parseFloat).sort((a, b)=>a - b).map((mark)=>{\n            const offset = this.calcOffset(mark);\n            const props = {\n                key: mark,\n                className: this.props.markClassName,\n                style: this.buildMarkStyle(offset)\n            };\n            return this.props.renderMark(props);\n        });\n    };\n    _proto.render = function render() {\n        const offset = [];\n        const { value } = this.state;\n        const l = value.length;\n        for(let i = 0; i < l; i += 1){\n            offset[i] = this.calcOffset(value[i], i);\n        }\n        const tracks = this.props.withTracks ? this.renderTracks(offset) : null;\n        const thumbs = this.renderThumbs(offset);\n        const marks = this.props.marks ? this.renderMarks() : null;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"div\", {\n            ref: (r)=>{\n                this.slider = r;\n                this.resizeElementRef.current = r;\n            },\n            style: {\n                position: \"relative\"\n            },\n            className: this.props.className + (this.props.disabled ? \" disabled\" : \"\"),\n            onMouseDown: this.onSliderMouseDown,\n            onClick: this.onSliderClick\n        }, tracks, thumbs, marks);\n    };\n    return ReactSlider;\n}(react__WEBPACK_IMPORTED_MODULE_2__.Component);\nReactSlider.displayName = \"ReactSlider\";\nReactSlider.defaultProps = {\n    min: 0,\n    max: 100,\n    step: 1,\n    pageFn: (step)=>step * 10,\n    minDistance: 0,\n    defaultValue: 0,\n    orientation: \"horizontal\",\n    className: \"slider\",\n    thumbClassName: \"thumb\",\n    thumbActiveClassName: \"active\",\n    trackClassName: \"track\",\n    markClassName: \"mark\",\n    withTracks: true,\n    pearling: false,\n    disabled: false,\n    snapDragDisabled: false,\n    invert: false,\n    marks: [],\n    renderThumb: (props)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"div\", _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__({}, props, {\n            __self: ReactSlider,\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 31\n            }\n        })),\n    renderTrack: (props)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"div\", _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__({}, props, {\n            __self: ReactSlider,\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 31\n            }\n        })),\n    renderMark: (props)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"span\", _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__({}, props, {\n            __self: ReactSlider,\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 30\n            }\n        }))\n};\nReactSlider.propTypes =  true ? {\n    /**\n   * The minimum value of the slider.\n   */ min: prop_types__WEBPACK_IMPORTED_MODULE_3__.number,\n    /**\n   * The maximum value of the slider.\n   */ max: prop_types__WEBPACK_IMPORTED_MODULE_3__.number,\n    /**\n   * Value to be added or subtracted on each step the slider makes.\n   * Must be greater than zero.\n   * `max - min` should be evenly divisible by the step value.\n   */ step: prop_types__WEBPACK_IMPORTED_MODULE_3__.number,\n    /**\n   * The result of the function is the value to be added or subtracted\n   * when the `Page Up` or `Page Down` keys are pressed.\n   *\n   * The current `step` value will be passed as the only argument.\n   * By default, paging will modify `step` by a factor of 10.\n   */ pageFn: prop_types__WEBPACK_IMPORTED_MODULE_3__.func,\n    /**\n   * The minimal distance between any pair of thumbs.\n   * Must be positive, but zero means they can sit on top of each other.\n   */ minDistance: prop_types__WEBPACK_IMPORTED_MODULE_3__.number,\n    /**\n   * Determines the initial positions of the thumbs and the number of thumbs.\n   *\n   * If a number is passed a slider with one thumb will be rendered.\n   * If an array is passed each value will determine the position of one thumb.\n   * The values in the array must be sorted.\n   */ defaultValue: prop_types__WEBPACK_IMPORTED_MODULE_3__.oneOfType([\n        prop_types__WEBPACK_IMPORTED_MODULE_3__.number,\n        prop_types__WEBPACK_IMPORTED_MODULE_3__.arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_3__.number)\n    ]),\n    /**\n   * Like `defaultValue` but for\n   * [controlled components](http://facebook.github.io/react/docs/forms.html#controlled-components).\n   */ // eslint-disable-next-line zillow/react/require-default-props\n    value: prop_types__WEBPACK_IMPORTED_MODULE_3__.oneOfType([\n        prop_types__WEBPACK_IMPORTED_MODULE_3__.number,\n        prop_types__WEBPACK_IMPORTED_MODULE_3__.arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_3__.number)\n    ]),\n    /**\n   * Determines whether the slider moves horizontally (from left to right)\n   * or vertically (from top to bottom).\n   */ orientation: prop_types__WEBPACK_IMPORTED_MODULE_3__.oneOf([\n        \"horizontal\",\n        \"vertical\"\n    ]),\n    /**\n   * The css class set on the slider node.\n   */ className: prop_types__WEBPACK_IMPORTED_MODULE_3__.string,\n    /**\n   * The css class set on each thumb node.\n   *\n   * In addition each thumb will receive a numbered css class of the form\n   * `${thumbClassName}-${i}`, e.g. `thumb-0`, `thumb-1`, ...\n   */ thumbClassName: prop_types__WEBPACK_IMPORTED_MODULE_3__.string,\n    /**\n   * The css class set on the thumb that is currently being moved.\n   */ thumbActiveClassName: prop_types__WEBPACK_IMPORTED_MODULE_3__.string,\n    /**\n   * If `true` tracks between the thumbs will be rendered.\n   */ withTracks: prop_types__WEBPACK_IMPORTED_MODULE_3__.bool,\n    /**\n   * The css class set on the tracks between the thumbs.\n   * In addition track fragment will receive a numbered css class of the form\n   * `${trackClassName}-${i}`, e.g. `track-0`, `track-1`, ...\n   */ trackClassName: prop_types__WEBPACK_IMPORTED_MODULE_3__.string,\n    /**\n   * If `true` the active thumb will push other thumbs\n   * within the constraints of `min`, `max`, `step` and `minDistance`.\n   */ pearling: prop_types__WEBPACK_IMPORTED_MODULE_3__.bool,\n    /**\n   * If `true` the thumbs can't be moved.\n   */ disabled: prop_types__WEBPACK_IMPORTED_MODULE_3__.bool,\n    /**\n   * Disables thumb move when clicking the slider track\n   */ snapDragDisabled: prop_types__WEBPACK_IMPORTED_MODULE_3__.bool,\n    /**\n   * Inverts the slider.\n   */ invert: prop_types__WEBPACK_IMPORTED_MODULE_3__.bool,\n    /**\n   * Shows passed marks on the track, if true it shows all the marks,\n   * if an array of numbers it shows just the passed marks, if a number is passed\n   * it shows just the marks in that steps: like passing 3 shows the marks 3, 6, 9\n   */ marks: prop_types__WEBPACK_IMPORTED_MODULE_3__.oneOfType([\n        prop_types__WEBPACK_IMPORTED_MODULE_3__.arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_3__.number),\n        prop_types__WEBPACK_IMPORTED_MODULE_3__.bool,\n        prop_types__WEBPACK_IMPORTED_MODULE_3__.number\n    ]),\n    /**\n   * The css class set on the marks.\n   */ markClassName: prop_types__WEBPACK_IMPORTED_MODULE_3__.string,\n    /**\n   * Callback called before starting to move a thumb. The callback will only be called if the\n   * action will result in a change. The function will be called with two arguments, the first\n   * being the initial value(s) the second being thumb index.\n   */ // eslint-disable-next-line max-len\n    // eslint-disable-next-line zillow/react/require-default-props, zillow/react/no-unused-prop-types\n    onBeforeChange: prop_types__WEBPACK_IMPORTED_MODULE_3__.func,\n    /**\n   * Callback called on every value change.\n   * The function will be called with two arguments, the first being the new value(s)\n   * the second being thumb index.\n   */ // eslint-disable-next-line max-len\n    // eslint-disable-next-line zillow/react/require-default-props, zillow/react/no-unused-prop-types\n    onChange: prop_types__WEBPACK_IMPORTED_MODULE_3__.func,\n    /**\n   * Callback called only after moving a thumb has ended. The callback will only be called if\n   * the action resulted in a change. The function will be called with two arguments, the\n   * first being the result value(s) the second being thumb index.\n   */ // eslint-disable-next-line max-len\n    // eslint-disable-next-line zillow/react/require-default-props, zillow/react/no-unused-prop-types\n    onAfterChange: prop_types__WEBPACK_IMPORTED_MODULE_3__.func,\n    /**\n   * Callback called when the the slider is clicked (thumb or tracks).\n   * Receives the value at the clicked position as argument.\n   */ // eslint-disable-next-line zillow/react/require-default-props\n    onSliderClick: prop_types__WEBPACK_IMPORTED_MODULE_3__.func,\n    /**\n   * aria-label for screen-readers to apply to the thumbs.\n   * Use an array for more than one thumb.\n   * The length of the array must match the number of thumbs in the value array.\n   */ // eslint-disable-next-line zillow/react/require-default-props\n    ariaLabel: prop_types__WEBPACK_IMPORTED_MODULE_3__.oneOfType([\n        prop_types__WEBPACK_IMPORTED_MODULE_3__.string,\n        prop_types__WEBPACK_IMPORTED_MODULE_3__.arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_3__.string)\n    ]),\n    /**\n   * aria-labelledby for screen-readers to apply to the thumbs.\n   * Used when slider rendered with separate label.\n   * Use an array for more than one thumb.\n   * The length of the array must match the number of thumbs in the value array.\n   */ // eslint-disable-next-line zillow/react/require-default-props\n    ariaLabelledby: prop_types__WEBPACK_IMPORTED_MODULE_3__.oneOfType([\n        prop_types__WEBPACK_IMPORTED_MODULE_3__.string,\n        prop_types__WEBPACK_IMPORTED_MODULE_3__.arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_3__.string)\n    ]),\n    /**\n   * aria-valuetext for screen-readers.\n   * Can be a static string, or a function that returns a string.\n   * The function will be passed a single argument,\n   * an object with the following properties:\n   *\n   *     state => `Value: ${state.value}`\n   *\n   * - `state.index` {`number`} the index of the thumb\n   * - `state.value` {`number` | `array`} the current value state\n   * - `state.valueNow` {`number`} the value of the thumb (i.e. aria-valuenow)\n   */ // eslint-disable-next-line zillow/react/require-default-props\n    ariaValuetext: prop_types__WEBPACK_IMPORTED_MODULE_3__.oneOfType([\n        prop_types__WEBPACK_IMPORTED_MODULE_3__.string,\n        prop_types__WEBPACK_IMPORTED_MODULE_3__.func\n    ]),\n    /**\n   * Provide a custom render function for the track node.\n   * The render function will be passed two arguments,\n   * an object with props that should be added to your handle node,\n   * and an object with track and slider state:\n   *\n   *     (props, state) => <div {...props} />\n   *\n   * - `props` {`object`} props to be spread into your track node\n   * - `state.index` {`number`} the index of the track\n   * - `state.value` {`number` | `array`} the current value state\n   */ renderTrack: prop_types__WEBPACK_IMPORTED_MODULE_3__.func,\n    /**\n   * Provide a custom render function for dynamic thumb content.\n   * The render function will be passed two arguments,\n   * an object with props that should be added to your thumb node,\n   * and an object with thumb and slider state:\n   *\n   *     (props, state) => <div {...props} />\n   *\n   * - `props` {`object`} props to be spread into your thumb node\n   * - `state.index` {`number`} the index of the thumb\n   * - `state.value` {`number` | `array`} the current value state\n   * - `state.valueNow` {`number`} the value of the thumb (i.e. aria-valuenow)\n   */ // eslint-disable-next-line zillow/react/require-default-props\n    renderThumb: prop_types__WEBPACK_IMPORTED_MODULE_3__.func,\n    /**\n   * Provide a custom render function for the mark node.\n   * The render function will be passed one argument,\n   * an object with props that should be added to your handle node\n   *\n   *     (props) => <span {...props} />\n   *\n   * - `props` {`object`} props to be spread into your track node\n   */ renderMark: prop_types__WEBPACK_IMPORTED_MODULE_3__.func\n} : 0;\nvar ReactSlider$1 = ReactSlider;\n //# sourceMappingURL=ReactSlider.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-slider/dist/es/dev/components/ReactSlider/ReactSlider.mjs\n");

/***/ })

};
;